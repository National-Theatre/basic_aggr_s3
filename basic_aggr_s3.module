<?php
/**
 * @file
 * basic_aggr_s3.module
 * @copyright The Royal National Theatre
 * @author John-Paul Drawneek
 */

/**
 * Implements hook_menu().
 */
function basic_aggr_s3_menu() {
  return array(
    'admin/config/system/refresh-s3' => array(
      'title'            => 'Refresh assets stored in S3',
      'description'      => 'Core assets are uploaded to S3 which can be refresh via this form.',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('basic_aggr_s3_force_refresh_form'),
      'access arguments' => array('access administration pages'),
      'type'             => MENU_NORMAL_ITEM,
      'file'             => 'basic_aggr_s3.batch.inc',
    ),
  );
}
/**
 * Implements hook_element_info_alter().
 */
function basic_aggr_s3_element_info_alter(&$types) {
  if (!empty($types['styles'])) {
    $types['styles']['#aggregate_callback'] = 'basic_aggr_s3_aggregate_css';
  }
}
/**
 * Implements hook_js_alter().
 */
function basic_aggr_s3_js_alter(&$javascripts) {
  $scopes = &drupal_static(__FUNCTION__);
  if (!isset($scopes)) {
    $tmp = array();
    foreach ($javascripts AS $js) {
      $tmp[$js['scope']] = 1;
    }
    $scopes = array_keys($tmp);
  }
  foreach ($scopes AS $scope) {
    basic_aggr_s3_get_js($javascripts, $scope);
  }
}
/**
 * Straight rip from common.inc but uses S3.
 *
 * @param array $javascript
 *   An array with all JavaScript code.
 *
 * @see drupal_get_js().
 */
function basic_aggr_s3_get_js($javascript = NULL, $scope = 'header') {
  if (!isset($javascript)) {
    $javascript = drupal_add_js();
  }

  // Filter out elements of the given scope.
  $items = array();
  foreach ($javascript as $key => $item) {
    if ($item['scope'] == $scope) {
      $items[$key] = $item;
    }
  }

  $output = '';
  // The index counter is used to keep aggregated and non-aggregated files in
  // order by weight.
  $index = 1;
  $processed = array();
  $files = array();
  $preprocess_js = (variable_get('preprocess_js', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));

  // A dummy query-string is added to filenames, to gain control over
  // browser-caching. The string changes on every update or full cache
  // flush, forcing browsers to load a new copy of the files, as the
  // URL changed. Files that should not be cached (see drupal_add_js())
  // get REQUEST_TIME as query-string instead, to enforce reload on every
  // page request.
  $default_query_string = variable_get('css_js_query_string', '0');

  // For inline JavaScript to validate as XHTML, all JavaScript containing
  // XHTML needs to be wrapped in CDATA. To make that backwards compatible
  // with HTML 4, we need to comment out the CDATA-tag.
  $embed_prefix = "\n<!--//--><![CDATA[//><!--\n";
  $embed_suffix = "\n//--><!]]>\n";

  // Since JavaScript may look for arguments in the URL and act on them, some
  // third-party code might require the use of a different query string.
  $js_version_string = variable_get('drupal_js_version_query_string', 'v=');

  // Sort the JavaScript so that it appears in the correct order.
  uasort($items, 'drupal_sort_css_js');

  // Provide the page with information about the individual JavaScript files
  // used, information not otherwise available when aggregation is enabled.
  $setting['ajaxPageState']['js'] = array_fill_keys(array_keys($items), 1);
  unset($setting['ajaxPageState']['js']['settings']);
  drupal_add_js($setting, 'setting');

  // If we're outputting the header scope, then this might be the final time
  // that drupal_get_js() is running, so add the setting to this output as well
  // as to the drupal_add_js() cache. If $items['settings'] doesn't exist, it's
  // because drupal_get_js() was intentionally passed a $javascript argument
  // stripped off settings, potentially in order to override how settings get
  // output, so in this case, do not add the setting to this output.
//  if ($scope == 'header' && isset($items['settings'])) {
//    $items['settings']['data'][] = $setting;
//  }
  // Loop through the JavaScript to construct the rendered output.
  $element = array(
    '#tag' => 'script',
    '#value' => '',
    '#attributes' => array(
      'type' => 'text/javascript',
    ),
  );
  foreach ($items as $item) {
    $query_string = empty($item['version']) ? $default_query_string : $js_version_string . $item['version'];

    switch ($item['type']) {
      case 'setting':
        $js_element = $element;
        $js_element['#value_prefix'] = $embed_prefix;
        $js_element['#value'] = 'jQuery.extend(Drupal.settings, ' . drupal_json_encode(drupal_array_merge_deep_array($item['data'])) . ");";
        $js_element['#value_suffix'] = $embed_suffix;
        $output .= theme('html_tag', array('element' => $js_element));
        break;

      case 'inline':
        $js_element = $element;
        if ($item['defer']) {
          $js_element['#attributes']['defer'] = 'defer';
        }
        $js_element['#value_prefix'] = $embed_prefix;
        $js_element['#value'] = $item['data'];
        $js_element['#value_suffix'] = $embed_suffix;
        $processed[$index++] = theme('html_tag', array('element' => $js_element));
        break;

      case 'file':
        $js_element = $element;
        if (!$item['preprocess'] || !$preprocess_js) {
          if ($item['defer']) {
            $js_element['#attributes']['defer'] = 'defer';
          }
          $query_string_separator = (strpos($item['data'], '?') !== FALSE) ? '&' : '?';
          $js_element['#attributes']['src'] = file_create_url($item['data']) . $query_string_separator . ($item['cache'] ? $query_string : REQUEST_TIME);
          $processed[$index++] = theme('html_tag', array('element' => $js_element));
        }
        else {
          // By increasing the index for each aggregated file, we maintain
          // the relative ordering of JS by weight. We also set the key such
          // that groups are split by items sharing the same 'group' value and
          // 'every_page' flag. While this potentially results in more aggregate
          // files, it helps make each one more reusable across a site visit,
          // leading to better front-end performance of a website as a whole.
          // See drupal_add_js() for details.
          $key = 'aggregate_' . $item['group'] . '_' . $item['every_page'] . '_' . $index;
          $processed[$key] = '';
          $files[$key][$item['data']] = $item;
        }
        break;

      case 'external':
        $js_element = $element;
        // Preprocessing for external JavaScript files is ignored.
        if ($item['defer']) {
          $js_element['#attributes']['defer'] = 'defer';
        }
        $js_element['#attributes']['src'] = $item['data'];
        $processed[$index++] = theme('html_tag', array('element' => $js_element));
        break;
    }
  }

  // Aggregate any remaining JS files that haven't already been output.
  if ($preprocess_js && count($files) > 0) {
    foreach ($files as $key => $file_set) {
      $uri = basic_aggr_s3_build_js_cache($file_set);
      // Only include the file if was written successfully. Errors are logged
      // using watchdog.
      if ($uri) {
        $preprocess_file = file_create_url($uri);
        $js_element = $element;
        $js_element['#attributes']['src'] = $preprocess_file;
        $processed[$key] = theme('html_tag', array('element' => $js_element));
      }
    }
  }
}
/**
 * CSS aggregation into bundle.
 */
function basic_aggr_s3_css_bundle(&$css_groups) {
  $css_groups = basic_aggr_s3_aggregate_css($css_groups);
}
/**
 * Straight rip from common.inc but uses S3.
 *
 * @param array $css_groups
 *   An array of CSS groups as returned by drupal_group_css().
 *
 * @see drupal_aggregate_css().
 */
function basic_aggr_s3_aggregate_css(&$css_groups) {
  $preprocess_css = (variable_get('preprocess_css', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));

  // For each group that needs aggregation, aggregate its items.
  foreach ($css_groups as $key => $group) {
    switch ($group['type']) {
      // If a file group can be aggregated into a single file, do so, and set
      // the group's data property to the file path of the aggregate file.
      case 'file':
        if ($group['preprocess'] && $preprocess_css) {
          $css_groups[$key]['data'] = basic_aggr_s3_build_css_cache($group['items']);
        }
        break;
      // Aggregate all inline CSS content into the group's data property.
      case 'inline':
        $css_groups[$key]['data'] = '';
        foreach ($group['items'] as $item) {
          $css_groups[$key]['data'] .= drupal_load_stylesheet_content($item['data'], $item['preprocess']);
        }
        break;
    }
  }
}
/**
 * Straight rip from common.inc but uses S3.
 *
 * @param array $css
 *   An array of CSS files to aggregate and compress into one file.
 *
 * @return boolean|string
 *   The URI of the CSS cache file, or FALSE if the file could not be saved.
 * 
 * @see drupal_build_css_cache().
 */
function basic_aggr_s3_build_css_cache($css) {
  $data = '';
  $uri = '';
  $map = variable_get('drupal_css_cache_files', array());
  // Create a new array so that only the file names are used to create the hash.
  // This prevents new aggregates from being created unnecessarily.
  $css_data = array();
  foreach ($css as $css_file) {
    $css_data[] = $css_file['data'];
  }
  $key = hash('sha256', serialize($css_data));
  if (isset($map[$key])) {
    $uri = $map[$key];
  }

  if (empty($uri) || !file_exists($uri)) {
    // Build aggregate CSS file.
    foreach ($css as $stylesheet) {
      // Only 'file' stylesheets can be aggregated.
      if ($stylesheet['type'] == 'file') {
        $contents = drupal_load_stylesheet($stylesheet['data'], TRUE);

        // Build the base URL of this CSS file: start with the full URL.
        $css_base_url = file_create_url($stylesheet['data']);
        // Move to the parent.
        $css_base_url = substr($css_base_url, 0, strrpos($css_base_url, '/'));
        // Simplify to a relative URL if the stylesheet URL starts with the
        // base URL of the website.
        if (substr($css_base_url, 0, strlen($GLOBALS['base_root'])) == $GLOBALS['base_root']) {
          $css_base_url = substr($css_base_url, strlen($GLOBALS['base_root']));
        }

        _drupal_build_css_path(NULL, $css_base_url . '/');
        // Anchor all paths in the CSS with its base URL, ignoring external and absolute paths.
        $data .= preg_replace_callback('/url\(\s*[\'"]?(?![a-z]+:|\/+)([^\'")]+)[\'"]?\s*\)/i', '_drupal_build_css_path', $contents);
      }
    }

    // Per the W3C specification at http://www.w3.org/TR/REC-CSS2/cascade.html#at-import,
    // @import rules must proceed any other style, so we move those to the top.
    $regexp = '/@import[^;]+;/i';
    preg_match_all($regexp, $data, $matches);
    $data = preg_replace($regexp, '', $data);
    $data = implode('', $matches[0]) . $data;

    // Prefix filename to prevent blocking by firewalls which reject files
    // starting with "ad*".
    $filename = 'css_' . drupal_hash_base64($data) . '.css';
    // Create the css/ within the files folder.
    $directory_path = str_replace(
      '/public',
      '',
      file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath()
    );
    $csspath = 's3://' . $directory_path . '/css';
    $uri = $csspath . '/' . $filename;
    // Create the CSS file.
    file_prepare_directory($csspath, FILE_CREATE_DIRECTORY);
    if (!file_exists($uri) && !file_unmanaged_save_data($data, $uri, FILE_EXISTS_REPLACE)) {
      return FALSE;
    }
    // If CSS gzip compression is enabled, clean URLs are enabled (which means
    // that rewrite rules are working) and the zlib extension is available then
    // create a gzipped version of this file. This file is served conditionally
    // to browsers that accept gzip using .htaccess rules.
    if (variable_get('css_gzip_compression', TRUE) && variable_get('clean_url', 0) && extension_loaded('zlib')) {
      if (!file_exists($uri . '.gz') && !file_unmanaged_save_data(gzencode($data, 9, FORCE_GZIP), $uri . '.gz', FILE_EXISTS_REPLACE)) {
        return FALSE;
      }
    }
    // Save the updated map.
    $map[$key] = $uri;
    variable_set('drupal_css_cache_files', $map);
  }
  return $uri;
}
/**
 * Straight rip from common.inc but uses S3.
 *
 * @param array $files
 *   An array of JavaScript files to aggregate and compress into one file.
 *
 * @return boolean|string
 *   The URI of the cache file, or FALSE if the file could not be saved.
 *
 * @see drupal_build_js_cache().
 */
function basic_aggr_s3_build_js_cache($files) {
  $contents = '';
  $uri = '';
  $map = variable_get('drupal_js_cache_files', array());
  // Create a new array so that only the file names are used to create the hash.
  // This prevents new aggregates from being created unnecessarily.
  $js_data = array();
  foreach ($files as $file) {
    $js_data[] = $file['data'];
  }
  $key = hash('sha256', serialize($js_data));
  if (isset($map[$key])) {
    $uri = $map[$key];
  }

  if (empty($uri) || !file_exists($uri)) {
    // Build aggregate JS file.
    foreach ($files as $path => $info) {
      if ($info['preprocess']) {
        // Append a ';' and a newline after each JS file to prevent them from running together.
        $contents .= file_get_contents($path) . ";\n";
      }
    }
    // Prefix filename to prevent blocking by firewalls which reject files
    // starting with "ad*".
    $filename = 'js_' . drupal_hash_base64($contents) . '.js';
    // Create the js/ within the files folder.
    $directory_path = str_replace(
      '/public',
      '',
      file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath()
    );
    $jspath = 's3://' . $directory_path . '/js';
    $uri = $jspath . '/' . $filename;
    // Create the JS file.
    file_prepare_directory($jspath, FILE_CREATE_DIRECTORY);
    if (!file_exists($uri) && !file_unmanaged_save_data($contents, $uri, FILE_EXISTS_REPLACE)) {
      return FALSE;
    }
    // If JS gzip compression is enabled, clean URLs are enabled (which means
    // that rewrite rules are working) and the zlib extension is available then
    // create a gzipped version of this file. This file is served conditionally
    // to browsers that accept gzip using .htaccess rules.
    if (variable_get('js_gzip_compression', TRUE) && variable_get('clean_url', 0) && extension_loaded('zlib')) {
      if (!file_exists($uri . '.gz') && !file_unmanaged_save_data(gzencode($contents, 9, FORCE_GZIP), $uri . '.gz', FILE_EXISTS_REPLACE)) {
        return FALSE;
      }
    }
    $map[$key] = $uri;
    variable_set('drupal_js_cache_files', $map);
  }
  return $uri;
}
/**
 * Implements hook_cron().
 */
function basic_aggr_s3_cron() {
  $folders = array(
    'misc',
  );
  basic_aggr_s3_build_parse_themes($folders);
  basic_aggr_s3_build_parse_modules($folders);
  basic_aggr_s3_build_parse_folders($folders);
}
/**
 * Gets all the base folders for your enabled modules.
 *
 * @param array $folders
 *   List of folders to parse.
 */
function basic_aggr_s3_build_parse_modules(&$folders) {
  $modules = module_list();
  foreach ($modules AS $module) {
    $folders[] = drupal_get_path('module', $module);
  }
}
/**
 * Gets all the base folders for your enabled themes.
 *
 * @param array $folders
 *   List of folders to parse.
 */
function basic_aggr_s3_build_parse_themes(&$folders) {
  $themes = list_themes();
  foreach ($themes AS $name => $theme) {
    if ($theme->status || variable_get('admin_theme', FALSE) == $name) {
      $folders[] = drupal_get_path('theme', $name);
    }
  }
}
/**
 * Parse folder list to find files to upload.
 *
 * @param array $folders
 *   List of folders to parse.
 */
function basic_aggr_s3_build_parse_folders($folders) {
  $result = db_select('basic_aggr_s3_files', 'c')
    ->fields('c')
    ->execute()
    ->fetchAllAssoc('path');
  $options = array(
    'key' => 'uri',
    'recurse' => TRUE,
  );
  $mask = variable_get(
    'basic_aggr_s3_mask',
    '/\.png|\.jpe?g|\.gif|\.ico|\.woff|\.svg|\.ttf|\.otf\.eot$/'
  );
  foreach ($folders as $folder) {
    $files = file_scan_directory($folder, $mask, $options);
    foreach (array_keys($files) AS $file) {
      basic_aggr_s3_build_file_upload($file, $result);
    }
  }
}
/**
 * Upload a given file to S3 and log it to DB.
 *
 * @param string $file
 *   File to upload to S3.
 *
 * @return boolean
 *   Success of failure flag.
 */
function basic_aggr_s3_build_file_upload($file, $list) {
  $file_path = DRUPAL_ROOT . '/' . $file;
  $whirlpool = hash_file('whirlpool', $file_path, TRUE);
  $filename = basename($file_path);
  $s3_path = 's3://' . $file;
  if (key_exists($s3_path, $list)) {
    if ($list[$s3_path]->whirlpool == $whirlpool) {
      return TRUE;
    }
  }
  drupal_mkdir(dirname($s3_path), NULL, TRUE);
  watchdog('S3', 'Update:' . $s3_path);
  $path = file_unmanaged_copy($file_path, $s3_path, FILE_EXISTS_REPLACE);
  if ($path) {
    db_merge('basic_aggr_s3_files')
      ->insertFields(array(
        'whirlpool' => $whirlpool,
        'filename'  => $filename,
        'path'      => $path,
        'md5'       => hash_file('md5', $file_path, TRUE),
        'deleted'   => 0,
        'changed'   => time(),
        'created'   => time(),
      ))
      ->key(array('path' => $s3_path))
      ->fields(
        array(
          'whirlpool' => $whirlpool,
          'filename'  => $filename,
          'path'      => $path,
          'md5'       => hash_file('md5', $file_path, TRUE),
          'deleted'   => 0,
          'changed'   => time(),
        )
      )
      ->execute();
    return TRUE;
  }
  else {
    return FALSE;
  }
}
/**
 * Implements hook_amazons3_save_headers().
 */
function basic_aggr_s3_amazons3_save_headers($local_path, $info) {
  if (strpos($local_path, 'css/css_') !== FALSE) {
    $cache_time = 60 * 60 * 24 * 7 * 52;
    $info['response'] = array(
      'Cache-Control' => 'max-age=' . $cache_time . ', public',
      'Expires' => gmdate('D, d M Y H:i:s', time() + $cache_time) . ' GMT',
    );
  }
  if (strpos($local_path, 'js/js_') !== FALSE) {
    $cache_time = 60 * 60 * 24 * 7 * 52;
    $info['response'] = array(
      'Cache-Control' => 'max-age=' . $cache_time . ', public',
      'Expires' => gmdate('D, d M Y H:i:s', time() + $cache_time) . ' GMT',
    );
  }

  return $info;
}